#pragma OPENCL EXTENSION cl_khr_int64_base_atomics : enable
#pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics: enable

void leftRotate(__global int *RC,__global int *LC,__global int *P,int x,__global int *R){
	__private int y;
	y = RC[x];
	RC[x] = LC[y];
	if( LC[y] != 0)
		P[LC[y]] = x;
	P[y] = P[x];
	if(P[x] == 0){
		P[y] = 0;
		R[0] = y; //make this node as root
		}
	else if(x == LC[P[x]])
		LC[P[x]] = y;
	else RC[P[x]] = y;
	LC[y] = x;
	P[x] = y;
}

void rightRotate(__global int *RC,__global int *LC,__global int *P,int y,__global int *R){
	__private int x;
	x = LC[y];
	LC[y] = RC[x];
	if( RC[x] != 0)
		P[RC[x]] = y;
	P[x] = P[y];
	if(P[y] == 0){
		P[x] = 0;
		R[0] = x;  //making this node as root
		}
	else if(y == LC[P[y]])
		LC[P[y]] = x;
	else RC[P[y]] = x;
	RC[x] = y;
	P[y] = x;
}


int RBInsert(long value,int counter,int base,__global int *node,__global int *LC,__global int *RC,__global int *P,__global int *C,__global int *L,__global int *R,__global int *TL,__global int *ln){
	
	__private int x,y;
	x=R[0]; //start comparing from root
	y=0;
	while( node[x] != -1){
		y = x;
		if (value < node[x])
			x = LC[x];
		else
			x = RC[x];
	}
	if( L[y] != 1){
		__private int l;
		l = atomic_cmpxchg(&L[y],0,1);
		if(!l){
			L[counter] = 1;
			node[counter] = value;
			P[counter] = y;
			if ( y == 0 ){
				P[counter] = 0;
				R[0] = counter;
				}
			else if( value < node[y])
				LC[y] = counter;
			else RC[y] = counter;
			L[y] = 0;  //release lock once inserted so other can insert if possible
			return insertFixup(counter,LC,RC,P,C,L,R,TL,base,ln);
		}
		else return 1;
	}
	else 
		return 1;	
	
}


int insertFixup(int index,__global int *LC,__global int *RC,__global int *P,__global int *C,__global int *L,__global int *R,__global int *TL, int base,__global int *ln){

__private int a,b,c,max,min,mid;
while(C[P[index]]){
		if( (P[index] == LC[P[P[index]]]) && L[P[index]]==0 && L[P[P[index]]]==0 && L[RC[P[P[index]]]]==0 ){
			__private int l1,l2,l3,l4;
			//l1 = atomic_cmpxchg(&L[index],0,1);
			a = P[index];
			b = P[P[index]];
			c = RC[P[P[index]]];
			if(a>b && a>c){
				max = a;
				if(b>c){
					mid = b;
					min = c;
				}
				else{
					mid = c;
					min = b;
				}
			}
			else if(a<b && a<c){
				min = a;
				if(b>c){
					max = b;
					mid = c;
				}
				else {
					max = c;
					mid = b;
				}
			}
			else {
				mid = a;
				if(b>c){
					max = b;
					min = c;
				}
				else{
					max = c;
					min = b;
				}
			}
			l2 = atomic_cmpxchg(&L[min],0,1); //take locks in increasing order of node indexes
			l3 = atomic_cmpxchg(&L[mid],0,1);
			l4 = atomic_cmpxchg(&L[max],0,1);
			//L[index]=1; L[P[index]]=1;  L[P[P[index]]]=1; L[RC[P[P[index]]]]=1;
			if(!l2 && !l3 && !l4){
				__private int z = c;
				if(C[z]){
					C[P[index]] = 0;
					C[z] = 0;
					C[P[P[index]]] = 1;
					__private int temp;
					temp = index;
					index = P[P[index]];
					L[temp]=0; L[P[temp]]=0; L[RC[P[P[temp]]]]=0;
				}
				else {
					if(index == RC[P[index]]){
						index = P[index];
						leftRotate(RC,LC,P,index,R);
					}
					C[P[index]] = 0;
					C[P[P[index]]] = 1;
					rightRotate(RC,LC,P,P[P[index]],R);
					L[index]=0; L[P[index]]=0;  L[RC[P[index]]]=0; L[RC[RC[P[index]]]]=0;
					return 0;
				}	
			}
			else{
				if(l2==0)L[min] = 0; //release locks acquired by this thread because it cant enter critical section
				if(l3==0)L[mid] = 0;
				if(l4==0)L[max] = 0;
				TL[base] = index;
				return 2;	
			}
		}
		else if( L[P[index]]==0 && L[P[P[index]]]==0 && L[LC[P[P[index]]]]==0 ){
			__private int l1,l2,l3,l4;
			//l1 = atomic_cmpxchg(&L[index],0,1);
			a = P[index];
			b = P[P[index]];
			c = LC[P[P[index]]];
			if(a>b && a>c){
				max = a;
				if(b>c){
					mid = b;
					min = c;
				}
				else{
					mid = c;
					min = b;
				}
			}
			else if(a<b && a<c){
				min = a;
				if(b>c){
					max = b;
					mid = c;
				}
				else {
					max = c;
					mid = b;
				}
			}
			else {
				mid = a;
				if(b>c){
					max = b;
					min = c;
				}
				else{
					max = c;
					min = b;
				}
			}
			l2 = atomic_cmpxchg(&L[min],0,1);
			l3 = atomic_cmpxchg(&L[mid],0,1);
			l4 = atomic_cmpxchg(&L[max],0,1);
			//L[index]=1; L[P[index]]=1;  L[P[P[index]]]=1; L[LC[P[P[index]]]]=1;
			if( !l2 && !l3 && !l4){
				__private int z = c;
				if(C[z]){
					C[P[index]] = 0;
					C[z] = 0;
					C[P[P[index]]] = 1;
					__private int temp;
					temp = index;
					index = P[P[index]];
					L[temp]=0; L[P[temp]]=0; L[LC[P[P[temp]]]]=0;
				}
				else {
					if(index == LC[P[index]]){
						index = P[index];
						rightRotate(RC,LC,P,index,R);
					}
					C[P[index]] = 0;
					C[P[P[index]]] = 1;
					leftRotate(RC,LC,P,P[P[index]],R);
					L[index]=0; L[P[index]]=0;  L[LC[P[index]]]=0; L[LC[LC[P[index]]]]=0;
					return 0;
				}
			}
			else{
				if(l2==0)L[min] = 0;
				if(l3==0)L[mid] = 0;
				if(l4==0)L[max] = 0; 
				TL[base] = index;
				return 2;
			}
		}	
}
C[R[0]] = 0;
L[index] = 0;
return 0;

}	



__kernel void rbtree(__global int* node, __global int* LC, __global int* RC, __global int* C, __global int* P, __global long * WL, 
														   __global int* L, __global int *counter, __global int *R, __global int *size,__global int *TL,__global int *ln)
{
	int base = get_global_id(0);
	if(base < size[0]){
		__private int index;
		index = counter[0]+base;
		__private int choice;
		choice = RBInsert(WL[base],index,base,node,LC,RC,P,C,L,R,TL,ln);
			if(choice == 2)
				WL[base] = -2;
			else if(choice == 0)
				WL[base] = -1;
	}
}
	

__kernel void knl2(__global int* node, __global int* LC, __global int* RC, __global int* C, __global int* P, __global long * WL, 
														 __global int* L, __global int *counter, __global int *R, __global int *size,__global int *TL,__global int *ln){

	int base = get_global_id(0);

	if(base < size[0]){
		__private int index;
		index = counter[0] + base;
		if( WL[base] != -1){
			if(WL[base] >= 0){
				__private int choice;
				choice = RBInsert(WL[base],index,base,node,LC,RC,P,C,L,R,TL,ln);
				if(choice == 2)
					WL[base] = -2;
				else if(choice == 0)
					WL[base] = -1;
			}
			else if(WL[base] == -2){
				__private int choice;
				choice = insertFixup(TL[base],LC,RC,P,C,L,R,TL,base,ln);
				if(choice == 0)
					WL[base] = -1;
			}
		}
	}
}
